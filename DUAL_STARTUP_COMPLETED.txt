========================================
  双场景启动方案配置完成
========================================

配置时间：2025-01-16
执行者：AI Assistant
状态：✅ 成功完成

========================================
已创建的文件
========================================

📄 配置文件（6个）：
  ✓ backend/.env.lan          # 后端局域网配置
  ✓ backend/.env.local        # 后端本地配置
  ✓ admin/.env.lan            # 前端局域网配置
  ✓ admin/.env.local          # 前端本地配置
  ✓ miniprogram/config/index.lan.js    # 小程序局域网配置
  ✓ miniprogram/config/index.local.js  # 小程序本地配置

🔧 启动脚本（4个）：
  ✓ start-lan.sh              # 局域网模式启动
  ✓ start-local.sh            # 本地模式启动
  ✓ stop-all.sh               # 停止所有服务
  ✓ status-all.sh             # 查看服务状态

📖 文档（2个）：
  ✓ STARTUP_GUIDE.md          # 详细启动指南（7000+字）
  ✓ QUICK_START.txt           # 快速参考指南

========================================
场景一：局域网模式
========================================

使用场景：
  • Ubuntu (192.168.1.118) 开发
  • 局域网其他设备访问管理后台
  • 局域网其他设备编译微信小程序

启动命令：
  $ ./start-lan.sh

访问地址：
  • 后端API:    http://192.168.1.118:3000
  • API文档:    http://192.168.1.118:3000/api/docs
  • 管理后台:   http://192.168.1.118:5173

关键配置：
  • 后端监听:   0.0.0.0:3000
  • 前端监听:   0.0.0.0:5173
  • 小程序API:  http://192.168.1.118:3000/api

========================================
场景二：本地模式
========================================

使用场景：
  • 办公室电脑本地开发
  • 仅本机访问
  • 不需要其他设备访问

启动命令：
  $ ./start-local.sh

访问地址：
  • 后端API:    http://localhost:3000
  • API文档:    http://localhost:3000/api/docs
  • 管理后台:   http://localhost:5173

关键配置：
  • 后端监听:   localhost:3000
  • 前端监听:   localhost:5173
  • 小程序API:  http://localhost:3000/api

========================================
快速开始
========================================

1. 选择并启动对应模式：
   $ ./start-lan.sh      # 局域网模式
   或
   $ ./start-local.sh    # 本地模式

2. 等待服务启动（约10秒）

3. 查看服务状态：
   $ ./status-all.sh

4. 开始开发！

========================================
管理命令
========================================

查看状态：  $ ./status-all.sh
停止服务：  $ ./stop-all.sh
后端日志：  $ tail -f /tmp/music-platform/backend.log
前端日志：  $ tail -f /tmp/music-platform/admin.log

========================================
配置切换机制
========================================

启动脚本会自动完成以下操作：

1. 复制对应的环境配置文件到 .env
   backend/.env.{lan|local} → backend/.env
   admin/.env.{lan|local} → admin/.env
   
2. 复制小程序配置文件
   miniprogram/config/index.{lan|local}.js → index.js

3. 测试数据库连接

4. 启动服务

无需手动修改配置文件！

========================================
小程序开发流程
========================================

1. 启动对应模式的后端服务
   $ ./start-lan.sh 或 ./start-local.sh

2. 打开HBuilderX
   打开 miniprogram 目录

3. 运行到微信开发者工具

4. 小程序会自动连接到配置的API地址
   局域网模式: http://192.168.1.118:3000/api
   本地模式:   http://localhost:3000/api

========================================
配置对比
========================================

| 配置项           | 局域网模式              | 本地模式           |
|------------------|------------------------|-------------------|
| 后端HOST         | 0.0.0.0                | localhost         |
| 后端端口         | 3000                   | 3000              |
| 前端HOST         | 0.0.0.0                | localhost         |
| 前端端口         | 5173                   | 5173              |
| 后端访问地址     | 192.168.1.118:3000     | localhost:3000    |
| 前端访问地址     | 192.168.1.118:5173     | localhost:5173    |
| 小程序API地址    | 192.168.1.118:3000/api | localhost:3000/api|
| 文件上传地址     | 192.168.1.118:3000     | localhost:3000    |
| 局域网可访问     | ✅                     | ❌                |

========================================
特性说明
========================================

✅ 一键启动：
   • 自动切换配置
   • 自动测试数据库
   • 自动启动服务

✅ 智能检测：
   • 端口冲突自动停止旧进程
   • 依赖缺失自动安装
   • 配置错误及时提示

✅ 状态监控：
   • 实时查看服务状态
   • 显示访问地址
   • 显示日志位置

✅ 安全隔离：
   • 两套配置完全独立
   • 互不干扰
   • 随时切换

========================================
注意事项
========================================

⚠️  切换模式：
   必须先停止当前服务：./stop-all.sh
   然后启动新模式

⚠️  局域网模式：
   • 确保防火墙允许端口访问
   • 仅在可信局域网使用
   • 不要在公网环境使用

⚠️  配置文件：
   • 不要手动修改 .env 和 index.js
   • 这些文件由启动脚本自动生成
   • 如需修改，编辑 .env.{lan|local} 等源文件

⚠️  端口占用：
   • 确保 3000 和 5173 端口未被占用
   • 如果占用，使用 ./stop-all.sh 清理

========================================
故障排除
========================================

问题1：端口被占用
解决：./stop-all.sh

问题2：数据库连接失败
解决：cd backend && node test-db-connection.js

问题3：服务无法访问
解决：./status-all.sh 查看状态
     tail -f /tmp/music-platform/backend.log 查看日志

问题4：配置未生效
解决：先停止服务，重新启动对应模式

问题5：小程序连接失败
解决：检查 miniprogram/config/index.js 内容
     确保API地址正确

========================================
文档索引
========================================

快速开始：  QUICK_START.txt（本文件同级目录）
详细指南：  STARTUP_GUIDE.md（7000+字完整文档）
部署说明：  README_DEPLOYMENT.md
开发环境：  docs/DEVELOPMENT_SETUP.md
数据库迁移：docs/DATABASE_MIGRATION_REPORT.md

========================================
技术细节
========================================

配置管理：
  • 使用 .env.{mode} 模式化管理
  • 启动时自动复制到 .env
  • 支持快速切换

端口管理：
  • 后端固定 3000
  • 前端固定 5173
  • 测试环境 5174

日志管理：
  • 统一存放在 /tmp/music-platform/
  • backend.log - 后端日志
  • admin.log - 前端日志
  • 使用 nohup 后台运行

进程管理：
  • PID 文件存储在 /tmp/music-platform/
  • backend.pid
  • admin.pid
  • 支持优雅停止和强制停止

========================================
下一步
========================================

1. 选择场景并启动服务
2. 验证访问地址
3. 开始开发
4. 使用 status-all.sh 监控服务

========================================
成功！双场景启动方案已完全配置！
========================================

立即开始：
  $ ./start-lan.sh      # Ubuntu局域网开发
  或
  $ ./start-local.sh    # 办公室本地开发

祝开发顺利！🎉
